name: Publish relase and update pom.xml
on:
  workflow_dispatch:
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: GPG_PASSPHRASE
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} 
      - name: Change to RELEASE version (remove SNAPSHOT)
        run: |
          POMS=(pom.xml bootiful-sqltemplate/pom.xml examples/pom.xml)
          for POM in ${POMS[@]}
          do
            CURRENT_VERSION=$(mvn --non-recursive help:evaluate -Dexpression=project.version -q -DforceStdout -file $POM)
            NEW_VERSION=$(echo ${CURRENT_VERSION} | awk '{ sub("-.*$",""); printf $0; }')
            MODULE_NAME=$(mvn --non-recursive help:evaluate -Dexpression=project.artifactId -q -DforceStdout -file $POM)
            ./mvnw versions:set -DgenerateBackupPoms=false -DgroupId=ninja.cero.bootiful-sqltemplate -DartifactId=${MODULE_NAME} -DoldVersion=${CURRENT_VERSION} -DnewVersion=${NEW_VERSION}
          done
      - name: Commit and push RELEASE version to GitHub
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "release version"
          git push
      - name: RELEASE
        run: mvn deploy --batch-mode --activate-profiles release --also-make --projects bootiful-sqltemplate
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Change to new SNAPSHOT version
        run: |
          POMS=(pom.xml bootiful-sqltemplate/pom.xml examples/pom.xml)
          for POM in ${POMS[@]}
          do
            CURRENT_VERSION=$(mvn --non-recursive help:evaluate -Dexpression=project.version -q -DforceStdout -file $POM)
            MINOR=$(echo ${CURRENT_VERSION} | awk '{ sub("\\.[0-9]+$",""); printf $0; }')
            REVISION=$(echo ${CURRENT_VERSION} | awk '{ sub(".+\\.",""); printf $0; }')
            NEW_REVISION=$((REVISION + 1))
            NEW_VERSION=$(echo ${MINOR}.${NEW_REVISION}-SNAPSHOT)
            MODULE_NAME=$(mvn --non-recursive help:evaluate -Dexpression=project.artifactId -q -DforceStdout -file $POM)
            ./mvnw versions:set -DgenerateBackupPoms=false -DgroupId=ninja.cero.bootiful-sqltemplate -DartifactId=${MODULE_NAME} -DoldVersion=${CURRENT_VERSION} -DnewVersion=${NEW_VERSION}
          done
      - name: Commit and push new SNAPSHOT version to GitHub
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "new snapshot version"
          git push
      - name: Rebase develop
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout develop
          git rebase
          git push
